// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: goods_storage.proto

package goods_storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoodsStorageClient is the client API for GoodsStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodsStorageClient interface {
	AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error)
}

type goodsStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodsStorageClient(cc grpc.ClientConnInterface) GoodsStorageClient {
	return &goodsStorageClient{cc}
}

func (c *goodsStorageClient) AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error) {
	out := new(AddProductResponse)
	err := c.cc.Invoke(ctx, "/github.com.Artenso.goods_storage.api.goods_storage.GoodsStorage/AddProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsStorageServer is the server API for GoodsStorage service.
// All implementations must embed UnimplementedGoodsStorageServer
// for forward compatibility
type GoodsStorageServer interface {
	AddProduct(context.Context, *AddProductRequest) (*AddProductResponse, error)
	mustEmbedUnimplementedGoodsStorageServer()
}

// UnimplementedGoodsStorageServer must be embedded to have forward compatible implementations.
type UnimplementedGoodsStorageServer struct {
}

func (UnimplementedGoodsStorageServer) AddProduct(context.Context, *AddProductRequest) (*AddProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedGoodsStorageServer) mustEmbedUnimplementedGoodsStorageServer() {}

// UnsafeGoodsStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodsStorageServer will
// result in compilation errors.
type UnsafeGoodsStorageServer interface {
	mustEmbedUnimplementedGoodsStorageServer()
}

func RegisterGoodsStorageServer(s grpc.ServiceRegistrar, srv GoodsStorageServer) {
	s.RegisterService(&GoodsStorage_ServiceDesc, srv)
}

func _GoodsStorage_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsStorageServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.Artenso.goods_storage.api.goods_storage.GoodsStorage/AddProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsStorageServer).AddProduct(ctx, req.(*AddProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoodsStorage_ServiceDesc is the grpc.ServiceDesc for GoodsStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoodsStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.Artenso.goods_storage.api.goods_storage.GoodsStorage",
	HandlerType: (*GoodsStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProduct",
			Handler:    _GoodsStorage_AddProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goods_storage.proto",
}
